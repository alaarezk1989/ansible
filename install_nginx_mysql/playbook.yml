- name: install and configure Nginx
  hosts: jenkins_slave
  become: true
  vars_files:
    - vars/default.yml
  tasks:
    - name: Install Prerequisites
      apt: 
        name: "{{ item }}" 
        update_cache: yes
        state: latest
        force_apt_get: yes
      loop: [ 'aptitude' ]

    - name: Install LEMP Packages
      apt: 
        name: "{{ item }}"
        update_cache: yes 
        state: latest
      loop: [ 'nginx', 'mysql-server', 'python3-pymysql', 'php-fpm', 'php-mysql' ]
    
    # Nginx Configuration
    - name: Sets Nginx conf file
      template:
        src: "templates/nginx.conf.j2"
        dest: "/etc/nginx/sites-available/{{ http_conf }}"

    - name: Enables new site
      file:
        src: "/etc/nginx/sites-available/{{ http_conf }}"
        dest: "/etc/nginx/sites-enabled/{{ http_conf }}"
        state: link
      notify: Reload Nginx
    
    - name: Removes "default" site
      file:
        path: "/etc/nginx/sites-enabled/default"
        state: absent
      notify: Reload Nginx

# UFW Configuration
    - name: "UFW - Allow HTTP on port {{ http_port }}"
      ufw:
        rule: allow
        port: "{{ http_port }}"
        proto: tcp

  # Sets Up PHP Info Page
    - name: Sets Up PHP Info Page
      template:
        src: "templates/info.php.j2"
        dest: "/var/www/html/info.php"

  handlers:
      - name: Reload Nginx
        service:
          name: nginx
          state: reloaded

      - name: Restart Nginx
        service:
          name: nginx
          state: restarted



- name: install and configure Mysql
  hosts: jenkins_slave
  become: true
  vars_files:
    - vars/default.yml
  tasks:
  # MySQL Configuration
    - name: Sets the root password 
      mysql_user: 
        name: root 
        password: "{{ mysql_root_password }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock

    - name: Removes all anonymous user accounts
      mysql_user:
        name: ''
        host_all: yes
        state: absent
        # login_unix_socket: /var/run/mysqld/mysqld.sock
        # login_user: root
        # login_password: "{{ mysql_root_password }}"

    - name: Removes the MySQL test database
      mysql_db: 
        login_unix_socket: /var/run/mysqld/mysqld.sock
        name: test 
        state: absent
        login_user: root
        # login_password: "{{ mysql_root_password }}"

    - name: Create a new database with name 'ecomdb'
      mysql_db:
        name: ecomdb
        state: present
        login_user: root
        login_unix_socket: /var/run/mysqld/mysqld.sock

    - name: Create database user with name 'ecomuser' and password 'ecompassword' with all database privileges
      mysql_user:
        login_unix_socket: /var/run/mysqld/mysqld.sock
        login_user: root
        name: ecomuser
        password: ecompassword
        host: localhost
        priv: '*.*:ALL'
        state: present

    - name: Copy database dump file
      copy:
        src: dbsql.sql
        dest: /home/ubuntu/dbsql.sql

    - name: Restore database
      mysql_db:
        login_unix_socket: /var/run/mysqld/mysqld.sock
        login_user: root
        name: ecomdb
        state: import
        target: /home/ubuntu/dbsql.sql
        force: true

